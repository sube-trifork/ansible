---
- name: Configure new server
  hosts: all
  become: yes
  vars:
    ssh_port: 13122
    
  tasks:
    - name: Get the IP address of the server
      command: hostname -I
      register: ip_resultserver

    - name: Get the hostname of the server
      command: hostname
      register: hostname_result
    
    - name: Set user and hostname variables      
      set_fact:
        ssh_user: "{{ lookup('password', '/dev/null length=10 chars=ascii_letters') }}"
        ssh_password: "{{ lookup('password', '/dev/null length=20') }}"
        server_hostname: "{{ hostname_result.stdout }}"
        server_ip: "{{ ip_resultserver.stdout.split()[0] }}"

    - name: add to keePass
      shell: |
        python3 - <<EOF
        import pykeepass
        DATABASE_PATH = '/Users/sunebentsen/Library/CloudStorage/OneDrive-TriforkIT/keepassxc/Passwords.kdbx'
        KEYFILE_PATH = '/Users/sunebentsen/Library/CloudStorage/OneDrive-TriforkIT/keepassxc/pass.keyx'

        # Open the KeePassXC database
        kp = pykeepass.PyKeePass(DATABASE_PATH, keyfile=KEYFILE_PATH)

        # Create a new entry
        # Find or create the "ansible" group
        ansible_group = kp.find_groups(name="ansible", first=True)
        if not ansible_group:
            ansible_group = kp.add_group(kp.root_group, "ansible")

        # Define the entry details
        entry_title = "{{ server_hostname }}"
        entry_username = "{{ ssh_user }}"
        entry_password = "{{ ssh_password }}"

        # Add the entry to the "ansible" group
        kp.add_entry(
            ansible_group,
            entry_title,
            entry_username,
            entry_password,
        )

        # Save the database
        kp.save()
        EOF
      delegate_to: localhost
      become: no

    - name: Add server details to local SSH config
      lineinfile:
        path: ~/.ssh/config
        state: present
        create: yes
        line: |
          Host {{ server_hostname }}
                  HostName {{ server_ip }}
                  Port {{ ssh_port }}
                  User {{ ssh_user }}
                  IdentityFile /Users/sunebentsen/.ssh/id_njalla
      delegate_to: localhost
      become: no

    - name: Create sshusers group if it doesn't exist
      group:
        name: sshusers
        state: present

    - name: Create a new user with a random username and strong password
      user:
        name: "{{ ssh_user }}"
        password: "{{ ssh_password | password_hash('sha512') }}"
        shell: /bin/bash
        groups: sshusers,sudo,users
        append: yes

    - name: Add SSH key for the new user
      authorized_key:
        user: "{{ ssh_user }}"
        state: present
        key: "{{ lookup('file', '/Users/sunebentsen/.ssh/id_njalla.pub') }}"

    - name: Replace sshd_config with new content
      copy:
        dest: /etc/ssh/sshd_config
        content: |
          Port {{ ssh_port }}
          ListenAddress 0.0.0.0
          ListenAddress ::
          Protocol 2
          AllowGroups sshusers
          PermitRootLogin no
          PasswordAuthentication no
          ChallengeResponseAuthentication no
          UsePAM yes
          AuthenticationMethods publickey
          PubkeyAcceptedKeyTypes ssh-ed25519
          HostKey /etc/ssh/ssh_host_ed25519_key
          PermitEmptyPasswords no
          X11Forwarding no
          AllowTcpForwarding no
          PermitTunnel no
          GatewayPorts no
          LogLevel VERBOSE
          MaxAuthTries 3
          MaxSessions 2
          ClientAliveInterval 300
          ClientAliveCountMax 2
          LoginGraceTime 30
          PermitUserEnvironment no
          AllowAgentForwarding no
          Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com
          MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com
          UseDNS no

    - name: Reload systemd manager configuration
      command: systemctl daemon-reload

    - name: Restart SSH service
      service:
        name: ssh
        state: restarted

    - name: Install UFW
      apt:
        name: ufw
        state: present

    - name: Allow SSH port through UFW
      ufw:
        rule: allow
        port: "{{ ssh_port }}"
        proto: tcp

    - name: Enable UFW
      ufw:
        state: enabled

    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist
